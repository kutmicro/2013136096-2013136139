 
/*
그래픽 LCD: 위에 부착함

마그네틱 센서: 2번핀 활용(디지털 값)

온, 습도센서: 4번핀 활용, 디지털 값

조도센서: 5번핀 활용(아날로그값 360기준 밤)
사운드센서: 아날로그 1번핀

피에조: 디지털(5번핀)

*/      
#include "U8glib.h" //그래픽lcd 헤더파일
#include "dht11.h"  //조도센서 헤더파일
dht11 DHT;          //객체 생성
#define DHT11_PIN 4 //4번핀에 온습도센서


U8GLIB_NHD_C12864 u8g(13, 11, 10, 9, 8);      // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, RST = 8

#define MENU_ITEMS 4  //처음 보일 메뉴 크기
#define MENU_TWO 4  //음식 메뉴에서의 크기
char *menu_strings[MENU_ITEMS] = { "LJH-HEJ World", "Manual", "Start Game", "Exit" };     //메뉴 이름들
char *menu_two[MENU_TWO] = { "Bread", "Apple", "Water", "exit" };     // 먹이 메뉴
int Bread_num=5;    //빵 개수 
int Apple_num=5;  
int Water_num=5;
bool bin_death=false; //해피빈 상태
uint8_t food_current = 0;//메뉴2의 메뉴 상태
uint8_t menu_current = 0;//메뉴 상태

unsigned long healthCount = 0;  //millis함수와 연동

int count_cold=0;            //bin의 상태변화를 위한 카운트
int count_happy=0;    //bin의 상태변화를 위한 카운트2-->그림을 서로 다른거 출력하기 위함
int health = 30;      //처음 생명력은 30


#define KEY_NONE 0           //키설정
#define KEY_PREV 1
#define KEY_NEXT 2
#define KEY_SELECT 3
#define KEY_BACK 4
uint8_t uiKeyCodeFirst = KEY_NONE;  //키 입력을 거쳐가는 부분
uint8_t uiKeyCode = KEY_NONE;   //실질적인 키값 부분

int numTones=128;//numTones이라는 배열 수를 나타내는 변수 
int tones[]={261, 440, 392, 349, 261, 0, 0, 0, 261, 440, 392, 349, 294, 0, 0, 0,
294, 467, 440, 392, 330, 0, 0, 0, 523, 523, 467, 392, 440, 0, 349, 0,
261, 440, 392, 349, 261, 0, 0, 0, 261, 440, 392, 349, 294, 0, 0, 0,
294, 467, 440, 392, 523, 0, 523, 523, 587, 523, 467, 392, 349, 0, 0, 0,
440, 440, 440, 0, 440, 440, 440, 0, 440, 523, 349, 392, 440, 0, 0, 0,
467, 467, 467, 467, 467, 440, 440, 440, 440, 392, 392, 349, 392, 0, 523, 0,
440, 440, 440, 0, 440, 440, 440, 0, 440, 523, 349, 392, 440, 0, 0, 0,
467, 467, 467, 467, 467, 440, 440, 440, 523, 523, 467, 392, 349, 0, 0, 0};//피에조 음

int numTones2=93;
int tones2[]={261, 0, 349, 0, 349, 392, 349, 330, 294, 0, 294, 0, 294, 0, 392, 0, 392, 440, 392, 349, 330, 0, 261, 0, 261, 0,
440, 0, 440, 467, 440, 392, 349, 0, 294, 0, 261, 261, 294, 0, 392, 0, 330, 0, 349, 0, 0, 0, 261, 0,
349, 0, 349, 0, 349, 0, 330, 0, 0, 0, 330, 0, 349, 0, 330, 0, 294, 0, 261, 0, 0, 0, 392, 0, 
440, 0, 392, 392, 349, 349, 523, 0, 261, 0, 261, 261, 294, 0, 392, 0, 330, 0, 349};//피에조 음

int piezo=5;//피에조 부저는 5번 핀으로 설정
int inputMagnet = 2;         // 마그네틱센서 핀
int val = 0;            //마그네틱센서 값을 저장할 변수
int chk;                 // 값을 읽고 에러 검출부분
int valSound = 0;             //사운드센서 값을 저장할 변수    
int action = 0;          // 메뉴 제어 변수
int light;               // 조도
int x =  100;             // 캐릭터 움직임
int y =  50;             // 캐릭터 움직임
bool isEnd = false;     //과정에서 움직이는 것으로 변하게 하는 변수->ture가 되면 나무가 나옴
bool the_end = false;   //해피빈이 나무로 변하게 하는 변수->true가되면 과정을 출력하게됨
bool present = false;     // 사운드 감지해서 true로 변하면 이벤트가 발생

int adc_key_in; //키값을 읽을때 잠시 저장하는 변수로 사용
int key=-1;   //실질적인 key부분
int oldkey=-1;  //키 입력 중복 방지를 위해 넣는 부분
int draw_state=0; //이미지를 순차적으로 출력하기 위해 사용
int draw_state2=0;//이미지를 순차적으로 출력하기 위해 사용2

const uint8_t bitmap_Sun[] PROGMEM = {    //해
  0x00,0x10,0x10,0x00,
  0x00,0x18,0x30,0x00,
  0x00,0x18,0x30,0x00,
  0x00,0x08,0x20,0x00,
  0x0c,0x0c,0x60,0x40,
  0x07,0x00,0x00,0xc0,
  0x03,0x8e,0x03,0x80,
  0x00,0x9d,0xe6,0x00,
  0x00,0x33,0xf0,0x00,
  0x00,0x66,0x18,0x00,
  0x00,0x6c,0x0c,0x00,
  0x3e,0x6d,0xcd,0xf8,
  0x7e,0x6c,0x6c,0xfc,
  0x00,0x67,0xcc,0x00,
  0x00,0x33,0x98,0x00,
  0x00,0x38,0x38,0x00,
  0x01,0x9f,0xf3,0x00,
  0x07,0x07,0xe3,0x80,
  0x0e,0x00,0x00,0xe0,
  0x18,0x08,0x20,0x20,
  0x00,0x18,0x30,0x00,
  0x00,0x18,0x30,0x00,
  0x00,0x30,0x18,0x00,
  0x00,0x20,0x18,0x00,
  0x00,0x00,0x08,0x00
};
const uint8_t bitmap_Moon[] PROGMEM = {   //달
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x06,0x00,
  0x00,0x00,0x03,0x80,
  0x00,0x00,0x01,0xe0,
  0x00,0x00,0x00,0xf0,
  0x00,0x00,0x00,0x78,
  0x00,0x00,0x00,0x7c,
  0x00,0x00,0x00,0x7c,
  0x00,0x00,0x00,0x3e,
  0x00,0x00,0x00,0x3e,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x7f,
  0x00,0x00,0x00,0x7f,
  0x00,0x00,0x00,0xff,
  0x40,0x00,0x01,0xff,
  0x60,0x00,0x03,0xfe,
  0x38,0x00,0x07,0xfc,
  0x3e,0x00,0x1f,0xfc,
  0x1f,0xc1,0xff,0xf8,
  0x0f,0xff,0xff,0xf0,
  0x07,0xff,0xff,0xe0,
  0x03,0xff,0xff,0xc0,
  0x01,0xff,0xff,0x80,
  0x00,0x7f,0xfe,0x00,
  0x00,0x0f,0xf8,0x00
};
const uint8_t rook_bitmap3[] PROGMEM = {      //해피콩
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x0e,0x00,0xe0,0x00,
  0x00,0x0f,0x03,0xc0,0x00,
  0x00,0x07,0x8f,0x80,0x00,
  0x00,0x07,0xdf,0x00,0x00,
  0x00,0x03,0xfe,0x00,0x00,
  0x00,0x00,0xfc,0x00,0x00,
  0x00,0x00,0x70,0x00,0x00,
  0x00,0x03,0xfc,0x00,0x00,
  0x00,0x1f,0xff,0x00,0x00,
  0x00,0x3e,0x07,0xc0,0x00,
  0x00,0xf0,0x01,0xf0,0x60,
  0x01,0xc0,0x00,0x78,0x60,
  0x03,0x80,0x00,0x1c,0x78,
  0x03,0x00,0x00,0x1e,0x78,
  0x07,0x00,0x00,0x0e,0x00,
  0x06,0x00,0x00,0x07,0x00,
  0x0c,0x00,0x00,0x03,0x00,
  0x0c,0x00,0x00,0x03,0x80,
  0x0c,0x30,0x00,0x31,0xc0,
  0x0c,0x78,0x00,0x79,0xc0,
  0x0c,0xcc,0x00,0xcc,0xc0,
  0x0c,0x84,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x78,0x00,0x78,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x06,0x03,0x00,0x60,
  0x0c,0x03,0x06,0x00,0x60,
  0x0c,0x01,0x8c,0x00,0x60,
  0x0c,0x00,0xf8,0x00,0x60,
  0x0c,0x00,0x70,0x00,0xf0,
  0x1c,0x00,0x00,0x01,0xf8,
  0x3c,0x00,0x00,0x03,0xcc,
  0x7c,0x00,0x00,0x03,0x86,
  0x6c,0x00,0x00,0x07,0x00,
  0x66,0x00,0x00,0x0e,0x00,
  0x43,0x00,0x00,0x1c,0x00,
  0x01,0x80,0x00,0x78,0x00,
  0x00,0xe0,0x00,0xe0,0x00,
  0x00,0x3f,0xff,0xc0,0x00,
  0x00,0x1f,0xff,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x1c,0x00,0xc0,0x00,
  0x00,0x0c,0x01,0xc0,0x00,
  0x00,0x04,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00
};
const uint8_t rook_bitmap6[] PROGMEM = {      //해피콩 좋아2
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x0e,0x00,0xe0,0x00,
  0x00,0x0f,0x03,0xc0,0x00,
  0x00,0x07,0x8f,0x80,0x00,
  0x00,0x07,0xdf,0x07,0x00,
  0x00,0x03,0xfe,0x07,0x00,
  0x00,0x00,0xfc,0x07,0x00,
  0x00,0x00,0x70,0x07,0xe0,
  0x00,0x03,0xfc,0x07,0xe0,
  0x00,0x1f,0xff,0x07,0xe0,
  0x00,0x3e,0x07,0xc0,0x00,
  0x00,0xf0,0x01,0xf0,0x00,
  0x01,0xc0,0x00,0x78,0x00,
  0x03,0x80,0x00,0x1c,0x00,
  0x03,0x00,0x00,0x1e,0x00,
  0x07,0x00,0x00,0x0e,0x00,
  0x06,0x00,0x00,0x07,0x00,
  0x0c,0x00,0x00,0x03,0x00,
  0x0c,0x00,0x00,0x03,0x80,
  0x0c,0x30,0x00,0x31,0xc0,
  0x0c,0x78,0x00,0x79,0xc0,
  0x0c,0xcc,0x00,0xcc,0xc0,
  0x0c,0x84,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x78,0x00,0x78,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x06,0x03,0x00,0x60,
  0x0c,0x03,0x06,0x00,0x60,
  0x0c,0x01,0x8c,0x00,0x60,
  0x0c,0x00,0xf8,0x00,0x60,
  0x0c,0x00,0x70,0x00,0xf0,
  0x1c,0x00,0x00,0x01,0xf8,
  0x3c,0x00,0x00,0x03,0xcc,
  0x7c,0x00,0x00,0x03,0x86,
  0x6c,0x00,0x00,0x07,0x00,
  0x66,0x00,0x00,0x0e,0x00,
  0x43,0x00,0x00,0x1c,0x00,
  0x01,0x80,0x00,0x78,0x00,
  0x00,0xe0,0x00,0xe0,0x00,
  0x00,0x3f,0xff,0xc0,0x00,
  0x00,0x1f,0xff,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x18,0x00,0xc0,0x00,
  0x00,0x1c,0x00,0xc0,0x00,
  0x00,0x0c,0x01,0xc0,0x00,
  0x00,0x04,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00
};
const uint8_t rook_bitmap4[] PROGMEM = {      //해피콩추워1 ㅠ
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x0e,0x00,0xe0,0x00,
  0x00,0x0f,0x03,0xc0,0x00,
  0x00,0x07,0x8f,0x80,0x00,
  0x00,0x07,0xdf,0x00,0x00,
  0x00,0x03,0xfe,0x00,0x00,
  0x00,0x00,0xfc,0x00,0x00,
  0x40,0x00,0x70,0x03,0x20,
  0xc6,0x03,0xfc,0x01,0x98,
  0x9c,0x1f,0xff,0x00,0xc8,
  0x10,0x3e,0x07,0xc0,0x44,
  0x30,0xf0,0x01,0xf0,0x24,
  0x21,0xc0,0x00,0x78,0x32,
  0x03,0x80,0x00,0x1c,0x00,
  0x03,0x00,0x00,0x1e,0x00,
  0x07,0x00,0x00,0x0e,0x00,
  0x06,0x00,0x00,0x07,0x00,
  0x0c,0x00,0x00,0x03,0x00,
  0x0c,0x00,0x00,0x03,0x80,
  0x0c,0x30,0x00,0x31,0xc0,
  0x0c,0xf0,0x00,0x39,0xc0,
  0x0c,0xc0,0x00,0x0c,0xc0,
  0x0d,0x80,0x00,0x06,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x78,0x00,0x78,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x78,0x00,0x60,
  0x0c,0x03,0xce,0x00,0xc0,
  0x0c,0x06,0x03,0x01,0xc0,
  0x0c,0x0c,0x01,0x83,0xc0,
  0x0c,0x00,0x00,0x03,0x88,
  0x0c,0x00,0x00,0x07,0x08,
  0x06,0x00,0x0f,0x0e,0x10,
  0x03,0x07,0xe1,0xfc,0x30,
  0x01,0xfc,0x00,0x78,0x10,
  0x00,0xf0,0x00,0xe0,0x60,
  0x00,0x3f,0xff,0xc0,0x80,
  0x00,0x1f,0xff,0xc0,0xc0,
  0x00,0x18,0x00,0xc1,0xc8,
  0x00,0x18,0x00,0xc0,0x08,
  0x00,0x18,0x00,0xc0,0x38,
  0x00,0x1c,0x00,0xc1,0xe0,
  0x00,0x0c,0x01,0xc3,0x00,
  0x00,0x04,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00
};
const uint8_t rook_bitmap5[] PROGMEM = {        //해피콩추워2 ㅠ
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x0e,0x00,0xe0,0x00,
  0x00,0x0f,0x03,0xc0,0x00,
  0x00,0x07,0x8f,0x80,0x00,
  0x00,0x07,0xdf,0x00,0x00,
  0x00,0x03,0xfe,0x00,0x00,
  0x0f,0x00,0xfc,0x00,0x00,
  0x38,0x00,0x70,0x00,0x00,
  0x60,0x03,0xfc,0x00,0x00,
  0x06,0x1f,0xff,0x01,0x8c,
  0x0c,0x3e,0x07,0xc0,0x44,
  0x10,0xf0,0x01,0xf0,0x46,
  0x31,0xc0,0x00,0x78,0x62,
  0x63,0x80,0x00,0x1c,0x12,
  0x43,0x00,0x00,0x1e,0x1b,
  0x07,0x00,0x00,0x0e,0x08,
  0x06,0x00,0x00,0x07,0x08,
  0x0c,0x00,0x00,0x03,0x08,
  0x0c,0x00,0x00,0x03,0x88,
  0x0c,0x30,0x00,0x31,0xc0,
  0x0c,0xf0,0x00,0x39,0xc0,
  0x0c,0xc0,0x00,0x0c,0xc0,
  0x0d,0x80,0x00,0x06,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x78,0x00,0x78,0x60,
  0x0c,0x30,0x00,0x30,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x78,0x00,0x60,
  0x0c,0x03,0xce,0x00,0xc0,
  0x0c,0x06,0x03,0x01,0xc0,
  0x0c,0x0c,0x01,0x83,0xc0,
  0x0c,0x00,0x00,0x03,0x80,
  0x0c,0x00,0x00,0x07,0x00,
  0x06,0x00,0x0f,0x0e,0x00,
  0x03,0x07,0xe1,0xfc,0x32,
  0x01,0xfc,0x00,0x78,0x2e,
  0x00,0xf0,0x00,0xe0,0x28,
  0x00,0x3f,0xff,0xc0,0x28,
  0x00,0x1f,0xff,0xc0,0x68,
  0x00,0x18,0x00,0xc0,0x08,
  0x00,0x18,0x00,0xc0,0x08,
  0x00,0x18,0x00,0xc0,0x10,
  0x00,0x1c,0x00,0xc0,0x00,
  0x00,0x0c,0x01,0xc0,0x00,
  0x00,0x04,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00
};
const uint8_t rook_bitmap7[] PROGMEM = {      //해피콩 더워2 ㅠ
  0x00,0x00,0x00,0x01,0xf8,
  0x00,0x00,0x00,0x03,0x0c,
  0x00,0x00,0x00,0x02,0x04,
  0x00,0x00,0x00,0x06,0x04,
  0x00,0x00,0x00,0x04,0x0c,
  0x00,0x00,0x07,0x04,0x18,
  0x00,0x0f,0x0f,0x82,0x70,
  0x00,0x3f,0xbf,0xc2,0x80,
  0x00,0xf0,0xfd,0xe3,0x00,
  0x03,0xe0,0x70,0x71,0x00,
  0x02,0x03,0xfc,0x19,0x1c,
  0x00,0x1f,0xff,0x00,0x36,
  0x00,0x3e,0x07,0xc0,0x62,
  0x00,0xf0,0x01,0xf0,0x42,
  0x01,0xc0,0x00,0x78,0x7e,
  0x03,0x80,0x00,0x1c,0x40,
  0x03,0x00,0x00,0x1e,0x00,
  0x07,0x00,0x00,0x0e,0x00,
  0x06,0x00,0x00,0x07,0x00,
  0x0c,0x00,0x00,0x03,0x00,
  0x0c,0x00,0x00,0x03,0x80,
  0x0c,0x00,0x00,0x01,0xc0,
  0x0c,0x00,0x00,0x01,0xc0,
  0x0c,0x00,0x00,0x00,0xc0,
  0x0c,0x00,0x06,0x60,0x60,
  0x0c,0x04,0x03,0xc0,0x60,
  0x0c,0x64,0x00,0x80,0x60,
  0x0c,0x1c,0x01,0xc0,0x60,
  0x0c,0x0c,0x03,0x60,0x60,
  0x0c,0x16,0x00,0x00,0x60,
  0x0c,0x23,0x00,0x00,0x60,
  0x0c,0x00,0x00,0x00,0x60,
  0x0c,0x00,0x0f,0x00,0x60,
  0x0c,0x00,0x33,0x00,0x60,
  0x0c,0x00,0x62,0x00,0x60,
  0x0c,0x00,0xc2,0x00,0xe0,
  0x0c,0x01,0x82,0x01,0xc0,
  0x0c,0x00,0x42,0x03,0xc0,
  0x0c,0x00,0x63,0x03,0x80,
  0x0c,0x00,0x21,0x07,0x00,
  0x06,0x00,0x11,0x0e,0x00,
  0x03,0x00,0x11,0x1e,0x00,
  0x01,0x80,0x1f,0x7a,0x00,
  0x01,0xe0,0x06,0xe2,0x00,
  0x03,0x3f,0xff,0xc2,0x00,
  0x02,0x1f,0xff,0xc2,0x00,
  0x02,0x18,0x00,0xc2,0x00,
  0x02,0x18,0x00,0xc3,0x00,
  0x06,0x18,0x00,0xc1,0x80,
  0x00,0x1c,0x00,0xc0,0x00,
  0x00,0x0c,0x01,0xc0,0x00,
  0x00,0x04,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00
};

const uint8_t bitmap_Tree[] PROGMEM = {       //완전체!!(나무)
  0x00,0x00,0x18,0x00,0x00,
  0x00,0x00,0x18,0x00,0x00,
  0x00,0x10,0xdb,0x00,0x00,
  0x00,0x38,0xff,0x00,0x20,
  0x00,0x10,0x7e,0x00,0x50,
  0x04,0x00,0x3c,0x00,0x20,
  0x0a,0x00,0x7e,0x08,0x00,
  0x04,0x00,0xff,0x1c,0x00,
  0x00,0x00,0x99,0x08,0x00,
  0x00,0x00,0x3c,0x00,0x00,
  0x00,0x00,0x66,0x00,0x00,
  0x01,0x00,0xcf,0x00,0x00,
  0x03,0x81,0x99,0x80,0x08,
  0x01,0x03,0x10,0xc0,0x1c,
  0x00,0x06,0x19,0xe4,0x08,
  0x00,0x0c,0x0f,0x3a,0x00,
  0x00,0x1a,0x00,0x1c,0x00,
  0x20,0x35,0x00,0x0c,0x00,
  0x50,0x22,0x00,0xe6,0x00,
  0x20,0x60,0x01,0x33,0x00,
  0x00,0xf3,0xf7,0x1f,0x00,
  0x00,0x7e,0x7d,0x3c,0x00,
  0x00,0x04,0x18,0xf0,0x00,
  0x00,0x0c,0x00,0x18,0x00,
  0x20,0x18,0xe0,0x0c,0x10,
  0x70,0x31,0x10,0x06,0x28,
  0x20,0x61,0x10,0x23,0x10,
  0x00,0xc0,0xe0,0x51,0x80,
  0x01,0x80,0x00,0x20,0xc0,
  0x03,0x00,0x00,0x00,0x60,
  0x06,0x38,0x0c,0x01,0xb0,
  0x0f,0x47,0xd3,0xba,0x70,
  0x01,0xc4,0x72,0xee,0x30,
  0x00,0x38,0x12,0xc6,0x42,
  0x00,0x70,0x0d,0xa1,0x87,
  0x08,0xc0,0x01,0x10,0x82,
  0x15,0x80,0x00,0xc8,0xc0,
  0x0b,0x08,0x00,0x48,0x60,
  0x06,0x14,0x00,0x44,0x30,
  0x0c,0x2a,0x01,0x84,0x18,
  0x18,0x14,0x03,0x18,0x4c,
  0x30,0x08,0x02,0x60,0xe6,
  0x7c,0x00,0x01,0x80,0x43,
  0xe6,0x0e,0x00,0x71,0xc1,
  0xe2,0x39,0x81,0xfe,0x63,
  0x27,0xf1,0x9f,0x82,0x7e,
  0x1c,0x01,0xd9,0x81,0xc0,
  0x00,0x01,0xe1,0x80,0x00,
  0x00,0x01,0x80,0x80,0x00,
  0x00,0x03,0x04,0x80,0x00,
  0x00,0x03,0x06,0xc0,0x00,
  0x00,0x02,0x46,0x60,0x00,
  0x00,0x03,0xe7,0xa0,0x00,
  0x00,0x03,0x3c,0xe0,0x00,
  0x00,0x00,0x18,0x00,0x00
};

const uint8_t bitmap_Logo1[] PROGMEM = {              //LJH-HEJ 크리스마스!!!
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x07,0xe0,0x07,0xf0,0x00,0x03,0x00,0x78,0x01,0xe0,0x00,0x00,0x00,
  0x00,0x00,0x00,0xff,0xe0,0x0f,0xff,0x80,0x03,0xe0,0x7c,0x03,0xf8,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xe0,0x0f,0xff,0xc0,0x03,0xfc,0x3c,0x03,0xfc,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xe0,0x0f,0xff,0xcf,0xe7,0xff,0x9e,0x07,0xfe,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xf0,0x07,0xff,0xef,0xf7,0xff,0xde,0x07,0xfe,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xf3,0xe1,0xff,0xcf,0xfb,0xff,0xcf,0x0f,0xfc,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xf3,0xe1,0xff,0x9f,0xfd,0xff,0xe7,0x8f,0x98,0x00,0x00,0x00,
  0x00,0x00,0x01,0xff,0xf7,0xe1,0xff,0x3f,0xfc,0x7f,0xf7,0x9f,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0xcf,0xf7,0xf3,0xe0,0xfc,0xfc,0xff,0xf3,0xdf,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0f,0xff,0xf3,0xfe,0xf8,0x7c,0xf3,0xfb,0xff,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,0xff,0xf3,0xfe,0x3c,0xfc,0xf1,0xfb,0xff,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,0xff,0xfb,0xfe,0x3f,0xfd,0xf3,0xf9,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,0xff,0xfb,0xfe,0x3f,0xf9,0xff,0xf9,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,0xff,0xfb,0xde,0x3f,0xe1,0xff,0xf9,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0x7f,0xf9,0xc0,0x3f,0xe3,0xff,0xf1,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0x7d,0xfd,0xc0,0x3f,0xf9,0xff,0xc1,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0x3d,0xfc,0xc0,0x3f,0xfc,0xff,0x01,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0xbd,0xfe,0x87,0xbe,0xfe,0xff,0x83,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0x81,0xfe,0xdf,0xbf,0x7e,0x6f,0x87,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x7f,0x81,0xff,0x7f,0xbf,0x3f,0x6f,0xc7,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x7f,0x81,0xff,0x7f,0xbf,0x1f,0x6f,0xef,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x78,0x01,0xff,0x03,0xbf,0x8f,0x67,0xe7,0xf9,0x80,0x00,0x00,0x00,
  0x1f,0x00,0x00,0x70,0x01,0xfe,0x00,0xbf,0x9f,0x60,0x37,0xfb,0xe0,0x00,0x00,0x00,
  0x7f,0xff,0x00,0x70,0x00,0x7e,0x00,0x3f,0x80,0x00,0x37,0xfb,0xfc,0x01,0xf8,0x00,
  0x7f,0xff,0xe0,0x70,0x1e,0x1e,0x00,0x00,0x1f,0xf0,0x03,0xfb,0xff,0x07,0xff,0x00,
  0x7f,0xff,0xe0,0x00,0x3f,0xc0,0x7f,0x80,0x3f,0xf8,0x38,0x13,0xff,0xcf,0xff,0x80,
  0x7f,0xff,0xf9,0xfe,0x3f,0xf3,0xff,0xe0,0x7f,0xfe,0x7c,0x03,0xff,0xef,0xc3,0xc0,
  0x1f,0xff,0xfb,0xff,0x3f,0xf9,0xff,0xf8,0xff,0x3e,0x7c,0x00,0xff,0xef,0xc3,0xe0,
  0x00,0xff,0xfb,0xff,0x3f,0xfc,0xff,0xf1,0xf8,0x7e,0xfc,0x00,0x3f,0xdf,0x83,0xe0,
  0x00,0xff,0xfb,0xff,0x9f,0xfe,0xf8,0xf3,0xf0,0xfe,0xfc,0xf0,0x7f,0xdf,0x87,0xe0,
  0x01,0xfc,0xf9,0xcf,0xde,0x3e,0xf0,0x63,0xe0,0xfd,0xfc,0xf8,0x7f,0xdf,0x87,0xe0,
  0x01,0xfc,0x39,0x8f,0xde,0x1e,0xf0,0x03,0xe0,0xfd,0xfd,0xf8,0xff,0xdf,0xc0,0xe0,
  0x01,0xfc,0x31,0x8f,0xde,0x06,0xf0,0x03,0xf0,0x01,0xfd,0xf8,0xfb,0xdf,0xf0,0x00,
  0x03,0xf8,0x01,0x8f,0xdf,0x86,0xe0,0x00,0xf8,0x01,0xff,0xfd,0xfb,0xcf,0xff,0x00,
  0x03,0xf8,0x01,0xff,0xdf,0xc0,0xe0,0x00,0x3f,0xe1,0xff,0xfd,0xf3,0xc7,0xff,0xc0,
  0x03,0xf8,0x03,0xff,0x1f,0xe1,0xfe,0x00,0x0f,0xf3,0xff,0xfd,0xff,0xe3,0xff,0xe0,
  0x07,0xf0,0x03,0xff,0x1f,0xe1,0xff,0xf8,0x00,0xfb,0xff,0xfd,0xff,0xec,0x7c,0x70,
  0x07,0xf0,0x03,0xff,0x1f,0xfd,0xff,0xf3,0x80,0x3b,0xff,0xfc,0xff,0xef,0x00,0x70,
  0x07,0xf8,0x03,0xcf,0x1f,0xfd,0xff,0xe7,0xc0,0x3b,0xff,0xfe,0x7f,0xcf,0x00,0x70,
  0x0f,0xf8,0x03,0xcf,0x0e,0xf9,0xf8,0x0f,0xc0,0x3b,0xff,0x7f,0x37,0x9f,0x00,0x70,
  0x0f,0xf8,0x03,0xcf,0x8e,0x01,0xf8,0x0f,0xe0,0x33,0xf7,0x7f,0xb3,0xbf,0x80,0xf0,
  0x0f,0xf8,0x03,0xcf,0x87,0x00,0xf8,0x0f,0xfc,0x77,0xf2,0x7f,0xb3,0xbf,0xf3,0xf0,
  0x0f,0xf8,0x03,0xcf,0xc7,0x00,0x38,0x07,0xff,0xf7,0xf0,0x7f,0x33,0xbf,0xff,0xf0,
  0x07,0xfc,0x01,0xcf,0xf7,0x01,0xb8,0x07,0xff,0xf7,0xf0,0x7f,0x73,0xbf,0xff,0xf0,
  0x07,0xfc,0x01,0xcf,0xf7,0x03,0xb8,0x03,0xff,0xf7,0xf8,0x3f,0x63,0xbf,0xff,0xe0,
  0x07,0xfc,0x01,0xcf,0xf7,0x0f,0xbc,0x01,0xff,0xf7,0xf8,0x3f,0x63,0xbf,0xff,0xe0,
  0x03,0xfc,0x01,0xcf,0xf7,0xff,0xbe,0x00,0x7f,0xf7,0xf8,0x31,0x63,0x9f,0xff,0xc0,
  0x03,0xfc,0x03,0xc7,0xe7,0xff,0x3f,0xfe,0x7f,0xf0,0xf8,0x00,0x03,0x8f,0xff,0x00,
  0x03,0xfc,0x07,0x81,0xcf,0xfc,0x7f,0xfe,0x1f,0xe0,0x00,0x00,0x00,0x01,0xfc,0x00,
  0x00,0x00,0x00,0x00,0x1f,0x00,0x7f,0xff,0x0f,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0xe9,0x02,0x5e,0xf0,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x49,0x02,0x50,0x20,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x4f,0x33,0xde,0x20,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x49,0x32,0x50,0x20,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x49,0x02,0x50,0xa0,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3d,0xc9,0x02,0x5e,0xe0,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const uint8_t bitmap_Logo2[] PROGMEM = {              //LJH-HEJ 크리스마스2!!!
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xf8,0x1f,0xf8,0x0f,0xff,0xfc,0xff,0x87,0xfe,0x1f,0xff,0xff,0xff,
  0xff,0xff,0xff,0x00,0x1f,0xf0,0x00,0x7f,0xfc,0x1f,0x83,0xfc,0x07,0xff,0xff,0xff,
  0xff,0xff,0xfc,0x00,0x1f,0xf0,0x00,0x3f,0xfc,0x03,0xc3,0xfc,0x03,0xff,0xff,0xff,
  0xff,0xff,0xfc,0x00,0x1f,0xf0,0x00,0x30,0x18,0x00,0x61,0xf8,0x01,0xff,0xff,0xff,
  0xff,0xff,0xfc,0x00,0x0f,0xf8,0x00,0x10,0x08,0x00,0x21,0xf8,0x01,0xff,0xff,0xff,
  0xff,0xff,0xfc,0x00,0x0c,0x1e,0x00,0x30,0x04,0x00,0x30,0xf0,0x03,0xff,0xff,0xff,
  0xff,0xff,0xfc,0x00,0x0c,0x1e,0x00,0x60,0x02,0x00,0x18,0x70,0x67,0xff,0xff,0xff,
  0xff,0xff,0xfe,0x00,0x08,0x1e,0x00,0xc0,0x03,0x80,0x08,0x60,0xff,0xff,0xff,0xff,
  0xff,0xff,0xfe,0x30,0x08,0x0c,0x1f,0x03,0x03,0x00,0x0c,0x20,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xf0,0x00,0x0c,0x01,0x07,0x83,0x0c,0x04,0x00,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xe0,0x00,0x0c,0x01,0xc3,0x03,0x0e,0x04,0x00,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xe0,0x00,0x04,0x01,0xc0,0x02,0x0c,0x06,0x01,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xe0,0x00,0x04,0x01,0xc0,0x06,0x00,0x06,0x01,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xe0,0x00,0x04,0x21,0xc0,0x1e,0x00,0x06,0x01,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xc0,0x80,0x06,0x3f,0xc0,0x1c,0x00,0x0e,0x01,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xc0,0x82,0x02,0x3f,0xc0,0x06,0x00,0x3e,0x01,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xc0,0xc2,0x03,0x3f,0xc0,0x03,0x00,0xfe,0x03,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xc0,0x42,0x01,0x78,0x41,0x01,0x00,0x7c,0x03,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xc0,0x7e,0x01,0x20,0x40,0x81,0x90,0x78,0x03,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x80,0x7e,0x00,0x80,0x40,0xc0,0x90,0x38,0x03,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x80,0x7e,0x00,0x80,0x40,0xe0,0x90,0x10,0x03,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x87,0xfe,0x00,0xfc,0x40,0x70,0x98,0x18,0x06,0x7f,0xff,0xff,0xff,
  0xe0,0xff,0xff,0x8f,0xfe,0x01,0xff,0x40,0x60,0x9f,0xc8,0x04,0x1f,0xff,0xff,0xff,
  0x80,0x00,0xff,0x8f,0xff,0x81,0xff,0xc0,0x7f,0xff,0xc8,0x04,0x03,0xfe,0x07,0xff,
  0x80,0x00,0x1f,0x8f,0xe1,0xe1,0xff,0xff,0xe0,0x0f,0xfc,0x04,0x00,0xf8,0x00,0xff,
  0x80,0x00,0x1f,0xff,0xc0,0x3f,0x80,0x7f,0xc0,0x07,0xc7,0xec,0x00,0x30,0x00,0x7f,
  0x80,0x00,0x06,0x01,0xc0,0x0c,0x00,0x1f,0x80,0x01,0x83,0xfc,0x00,0x10,0x3c,0x3f,
  0xe0,0x00,0x04,0x00,0xc0,0x06,0x00,0x07,0x00,0xc1,0x83,0xff,0x00,0x10,0x3c,0x1f,
  0xff,0x00,0x04,0x00,0xc0,0x03,0x00,0x0e,0x07,0x81,0x03,0xff,0xc0,0x20,0x7c,0x1f,
  0xff,0x00,0x04,0x00,0x60,0x01,0x07,0x0c,0x0f,0x01,0x03,0x0f,0x80,0x20,0x78,0x1f,
  0xfe,0x03,0x06,0x30,0x21,0xc1,0x0f,0x9c,0x1f,0x02,0x03,0x07,0x80,0x20,0x78,0x1f,
  0xfe,0x03,0xc6,0x70,0x21,0xe1,0x0f,0xfc,0x1f,0x02,0x02,0x07,0x00,0x20,0x3f,0x1f,
  0xfe,0x03,0xce,0x70,0x21,0xf9,0x0f,0xfc,0x0f,0xfe,0x02,0x07,0x04,0x20,0x0f,0xff,
  0xfc,0x07,0xfe,0x70,0x20,0x79,0x1f,0xff,0x07,0xfe,0x00,0x02,0x04,0x30,0x00,0xff,
  0xfc,0x07,0xfe,0x00,0x20,0x3f,0x1f,0xff,0xc0,0x1e,0x00,0x02,0x0c,0x38,0x00,0x3f,
  0xfc,0x07,0xfc,0x00,0xe0,0x1e,0x01,0xff,0xf0,0x0c,0x00,0x02,0x00,0x1c,0x00,0x1f,
  0xf8,0x0f,0xfc,0x00,0xe0,0x1e,0x00,0x07,0xff,0x04,0x00,0x02,0x00,0x13,0x83,0x8f,
  0xf8,0x0f,0xfc,0x00,0xe0,0x02,0x00,0x0c,0x7f,0xc4,0x00,0x03,0x00,0x10,0xff,0x8f,
  0xf8,0x07,0xfc,0x30,0xe0,0x02,0x00,0x18,0x3f,0xc4,0x00,0x01,0x80,0x30,0xff,0x8f,
  0xf0,0x07,0xfc,0x30,0xf1,0x06,0x07,0xf0,0x3f,0xc4,0x00,0x80,0xc8,0x60,0xff,0x8f,
  0xf0,0x07,0xfc,0x30,0x71,0xfe,0x07,0xf0,0x1f,0xcc,0x08,0x80,0x4c,0x40,0x7f,0x0f,
  0xf0,0x07,0xfc,0x30,0x78,0xff,0x07,0xf0,0x03,0x88,0x0d,0x80,0x4c,0x40,0x0c,0x0f,
  0xf0,0x07,0xfc,0x30,0x38,0xff,0xc7,0xf8,0x00,0x08,0x0f,0x80,0xcc,0x40,0x00,0x0f,
  0xf8,0x03,0xfe,0x30,0x08,0xfe,0x47,0xf8,0x00,0x08,0x0f,0x80,0x8c,0x40,0x00,0x0f,
  0xf8,0x03,0xfe,0x30,0x08,0xfc,0x47,0xfc,0x00,0x08,0x07,0xc0,0x9c,0x40,0x00,0x1f,
  0xf8,0x03,0xfe,0x30,0x08,0xf0,0x43,0xfe,0x00,0x08,0x07,0xc0,0x9c,0x40,0x00,0x1f,
  0xfc,0x03,0xfe,0x30,0x08,0x00,0x41,0xff,0x80,0x08,0x07,0xce,0x9c,0x60,0x00,0x3f,
  0xfc,0x03,0xfc,0x38,0x18,0x00,0xc0,0x01,0x80,0x0f,0x07,0xff,0xfc,0x70,0x00,0xff,
  0xfc,0x03,0xf8,0x7e,0x30,0x03,0x80,0x01,0xe0,0x1f,0xff,0xff,0xff,0xfe,0x03,0xff,
  0xff,0xff,0xff,0xff,0xe0,0xff,0x80,0x00,0xf0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0x16,0xfd,0xa1,0x0f,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xb6,0xfd,0xaf,0xdf,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xb0,0xcc,0x21,0xdf,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xb6,0xcd,0xaf,0xdf,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0xb6,0xfd,0xaf,0x5f,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc2,0x36,0xfd,0xa1,0x1f,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};
const uint8_t bitmap_child[] PROGMEM = {              //닝겐
0x0f,0xf0,
0x10,0x08,
0x14,0x88,
0x14,0x88,
0x10,0x10,
0x1b,0x30,
0x30,0x0c,
0x60,0x06,
0x40,0x12,
0x50,0x12,
0x50,0x1a,
0x73,0xce,
0x0a,0x50,
0x0a,0x50,
0x0a,0x50,
0x12,0x48
};
const uint8_t bitmap_gameover[] PROGMEM = { //게임오바바바바바바밥바바바밥바ㅏ
0xff,0xff,0xf3,0xff,0xe7,0xff,0x83,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xf3,0xff,0xc3,0xff,0x11,0xff,0xff,0xff,0x07,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xf0,0xff,0xc0,0xfe,0x38,0x3f,0xff,0xf8,0x27,0xff,0xff,0x1f,0xff,0xff,
0xff,0xff,0xe6,0x0f,0x98,0x3c,0xfc,0x03,0xff,0xe1,0xe7,0xff,0xf8,0x5f,0xff,0xff,
0xff,0xf7,0xe7,0x03,0x3e,0x09,0xff,0xc0,0x7f,0x8f,0xe3,0xff,0xe3,0xdf,0xff,0xff,
0xff,0xe3,0xc7,0xc0,0x7f,0x81,0xff,0xf8,0x00,0x7f,0xe3,0xfb,0x8f,0x9f,0x9f,0xff,
0xff,0xc3,0xc7,0xf8,0xff,0xf3,0xff,0xff,0x87,0xff,0xf0,0x07,0x3f,0x3c,0x0f,0xff,
0xe0,0x00,0x8f,0xff,0xff,0xf3,0xff,0xff,0xff,0xff,0xf8,0x06,0x7c,0x70,0x01,0xff,
0xf0,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xf9,0xe3,0xf0,0x7f,
0xf9,0xfe,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0xff,0xfe,0x43,0x87,0xfe,0x3f,
0xfc,0xff,0xdf,0xff,0xff,0xfc,0x03,0xfc,0x7f,0xf8,0x1f,0xfe,0x1f,0x1f,0xff,0x9f,
0xfe,0x3f,0xff,0xff,0xff,0xf0,0x03,0xc0,0x7c,0x38,0x01,0xff,0xfc,0x3f,0xff,0xcf,
0xfe,0x1f,0xff,0xfe,0x07,0xf0,0x01,0xc0,0x70,0x38,0x00,0x7f,0xf8,0x7f,0xff,0xe7,
0xff,0x87,0xff,0xe0,0x01,0xe0,0x01,0xc0,0x60,0x38,0x00,0x3f,0xf1,0xff,0xff,0xf3,
0xff,0xc3,0xff,0xc0,0x00,0xc0,0x00,0xc0,0x60,0x18,0x00,0x3f,0xe3,0xff,0xfe,0xfb,
0xff,0xe1,0xff,0x00,0x00,0xc0,0x00,0xc0,0x00,0x18,0x00,0x3f,0xe7,0xff,0xfe,0xf9,
0xff,0xf0,0xfc,0x00,0x00,0xc0,0x20,0xc0,0x00,0x0c,0x00,0x3f,0xcf,0xff,0xfc,0xfd,
0x80,0x00,0xf8,0x00,0x00,0xc0,0x60,0x80,0x00,0x04,0x00,0x3f,0xdf,0xff,0xf9,0xfd,
0xe0,0x00,0x78,0x0f,0xf0,0xc0,0xf0,0x80,0x00,0x04,0x08,0x7f,0xdf,0xff,0x09,0xfd,
0xf0,0x1f,0xf8,0x1f,0xff,0xc0,0xf0,0x80,0x00,0x04,0x0f,0xff,0xdf,0xff,0xc1,0xfc,
0xfc,0x7f,0xf8,0x3f,0xff,0xc1,0xe0,0x80,0x00,0x04,0x07,0xff,0xdf,0xf3,0xf0,0xfe,
0xfe,0x1f,0xf8,0x7f,0xff,0xc0,0x00,0x80,0x00,0x03,0x07,0xff,0xdf,0xe7,0xf4,0x3e,
0xff,0x0f,0xf8,0x7e,0x00,0x40,0x00,0x81,0x02,0x01,0x00,0x3f,0xd8,0xcf,0xe7,0xff,
0xff,0x8f,0xf8,0x3c,0x00,0x60,0x00,0xc1,0x86,0x01,0x00,0x1f,0xdc,0x1f,0xcf,0xff,
0xff,0xc7,0xf8,0x3e,0x00,0x20,0x30,0x41,0x86,0x01,0x00,0x1f,0xdf,0x1f,0x9f,0xff,
0xff,0x83,0xf8,0x1f,0xf8,0x20,0xf0,0x61,0xc6,0x01,0x88,0x1f,0xef,0x03,0xff,0xff,
0xfc,0x03,0xf8,0x1f,0x8c,0x20,0xf8,0x21,0xcf,0x00,0x8c,0x3f,0xee,0x71,0xff,0xff,
0xe0,0xfb,0xf8,0x0f,0x06,0x20,0xf8,0x21,0xff,0x80,0x8f,0xff,0xe6,0xff,0xff,0xff,
0x87,0xfb,0xfc,0x00,0x02,0x20,0xf8,0x21,0xff,0xc0,0x8f,0xff,0xf4,0xff,0xff,0xff,
0x0f,0xff,0xfe,0x00,0x02,0x61,0xf8,0x21,0xff,0xc0,0x80,0x0f,0xf3,0xff,0x83,0xff,
0x1f,0xff,0xff,0x00,0x1e,0x41,0xf8,0x20,0x3f,0xc3,0x80,0x07,0xf9,0xff,0xb9,0xbf,
0x0f,0xff,0xff,0x80,0x38,0x41,0xf8,0xe0,0x3f,0xff,0x80,0x07,0xfc,0xff,0x3d,0xbb,
0x03,0xff,0xff,0xc0,0xf8,0x41,0xf8,0xe0,0x3f,0xff,0xe0,0x07,0xfe,0xff,0x7e,0xbb,
0xe1,0xff,0xff,0xff,0xf8,0x41,0xf8,0xff,0xff,0xff,0xff,0xff,0xfe,0x7f,0x7f,0xb7,
0xf0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x01,0xff,0x3f,0x3f,0x27,
0xfc,0x7f,0xff,0xff,0xff,0xff,0x0f,0xff,0xf8,0x00,0x20,0x00,0xff,0x9f,0xdf,0x0f,
0xfe,0x1f,0xff,0xff,0xf8,0x1c,0x0f,0xf8,0x08,0x00,0x20,0x00,0xff,0x9f,0xff,0xff,
0xff,0x0f,0xff,0xff,0x80,0x08,0x07,0xf0,0x08,0x00,0x20,0x00,0xff,0xc7,0xff,0xfe,
0xff,0x87,0xff,0xff,0x00,0x0c,0x07,0xf0,0x08,0x00,0x60,0x00,0xff,0xe0,0x7f,0xf8,
0xff,0xc3,0xff,0xfe,0x00,0x04,0x03,0xf0,0x08,0x00,0xc0,0xe0,0xff,0xff,0x0f,0xe3,
0xff,0xe0,0xff,0xfc,0x00,0x06,0x03,0xf0,0x08,0x3f,0xc1,0xe1,0xff,0xff,0xe3,0xcf,
0xff,0xf0,0x3f,0xf8,0x00,0x02,0x03,0xf0,0x18,0x00,0xc1,0x81,0xff,0xff,0xfb,0xdf,
0xff,0xfe,0x3f,0xf8,0x00,0x02,0x03,0xf0,0x10,0x00,0x40,0x03,0xff,0xff,0xf9,0x9f,
0xff,0xfc,0x7f,0xf0,0x00,0x03,0x01,0xe0,0x30,0x00,0xc0,0x01,0xff,0xff,0xfd,0xbf,
0xff,0xf8,0xff,0xf0,0x00,0x01,0x00,0x40,0x60,0x01,0xc0,0x00,0x3f,0xff,0xfd,0xbf,
0xff,0xf1,0xff,0xf0,0x0e,0x01,0x80,0x00,0x40,0x3f,0xc0,0x00,0x1f,0xff,0xf9,0xbf,
0xff,0xe3,0xff,0xf0,0x0f,0x01,0x80,0x00,0xc0,0x7c,0x40,0x00,0x1f,0xff,0xf3,0xbf,
0xff,0xe3,0xff,0xf0,0x0f,0x81,0x80,0x00,0xc0,0x00,0x40,0x80,0x0f,0xff,0xf3,0xbf,
0xff,0xc7,0xff,0xf0,0x1f,0x01,0xc0,0x00,0xc0,0x00,0x40,0xc0,0x0c,0x3f,0xf7,0x3f,
0xff,0x87,0xff,0xf0,0x0f,0x01,0xc0,0x01,0xc0,0x00,0x40,0xf0,0x0c,0x3f,0xc6,0x7f,
0xff,0x8f,0xff,0xf0,0x00,0x01,0xc0,0x01,0xc0,0x00,0x40,0xfc,0x0c,0x20,0x1c,0xff,
0xff,0x1f,0xff,0xf0,0x00,0x01,0xe0,0x03,0xc0,0x00,0x40,0xfe,0x0c,0x1f,0x92,0x07,
0xfc,0x00,0x07,0xf0,0x00,0x01,0xe0,0x03,0xe0,0x01,0xc0,0xff,0xfc,0x3f,0xd7,0xf3,
0xf8,0x00,0x0f,0xf8,0x00,0x03,0xf0,0x1f,0xff,0xff,0xf1,0xff,0xc0,0x03,0xc7,0xf8,
0xff,0xff,0xcf,0xfe,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x03,0x67,0x7e,
0xff,0xff,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x03,0xe7,0xfb,
0xff,0xff,0xcf,0xff,0xff,0xff,0xff,0xfc,0x3f,0xff,0xff,0xbf,0xc0,0x03,0x76,0xff,
0xff,0xff,0x8f,0xf8,0x3f,0xff,0xfe,0x00,0x1f,0xff,0xff,0xbf,0xf0,0x3f,0xf7,0xff,
0xff,0xff,0x9e,0x00,0x0f,0xff,0xfc,0x00,0x1f,0xff,0xff,0xbf,0xe4,0x3f,0xf3,0xef,
0xff,0xff,0x80,0x07,0xe3,0xff,0xc0,0x1f,0x87,0xff,0xff,0x3f,0xcc,0x3f,0x7f,0xff,
0xff,0xff,0x81,0xff,0xf1,0xff,0x81,0xff,0xc3,0xff,0xfc,0x7f,0xdc,0x3b,0xfe,0xff,
0xff,0xff,0x8f,0xff,0xf1,0xfe,0x0f,0xff,0xe1,0xff,0xe1,0xff,0xdc,0x3f,0x6f,0xfd,
0xff,0xff,0x9f,0xff,0xf0,0xfc,0xff,0xff,0xf8,0x7f,0xc3,0xff,0xdc,0x37,0xff,0xbf,
0xff,0xff,0x9f,0xff,0xf8,0x71,0xff,0xff,0xfc,0x3f,0x8f,0xff,0xd4,0x3f,0xff,0xff
}; 



// 키 값
//         4
//         |
//   0 --  1 -- 3
//         |
//         2

//
//            prev
//               |
//   back -- select -- none
//               |
//             next
int get_key(unsigned int input) //키값을 읽어옴
{   
  if (input < 100) return 0;          //왼쪽
  else  if (input < 300) return 1;    //클릭
  else  if (input < 500) return 2;    //아래
  else  if (input < 700) return 3;   //오른쪽
  else  if (input < 900) return 4;   //위
  else  return -1;                  //예외
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////키를 입력받는 부분
void uiStep(void) {//키를 입력받고 uiKeyCode에 저장, 처음메뉴에서 쓰는 키입력
  adc_key_in = analogRead(0);   // 키값을 읽음
  key = get_key(adc_key_in);   // key에 저장(return값으로)
  Serial.print(key);
  if (key != oldkey)            // 한번씩만 눌리도록 함
  {
    delay(10);   
    oldkey = key;             //한번씩만 눌리도록 함
    if (key >=0){
      //Serial.println(key);
      if ( key == 0 )
        uiKeyCodeFirst = KEY_BACK;
      else if ( key == 1 )      //키값에 따라 방향을 정해줌~~
        uiKeyCodeFirst = KEY_SELECT;
      else if ( key == 2 )
        uiKeyCodeFirst = KEY_NEXT;
      else if ( key == 4 )
        uiKeyCodeFirst = KEY_PREV;
      else 
        uiKeyCodeFirst = KEY_NONE;

      uiKeyCode = uiKeyCodeFirst;           
    }
  }
  delay(100);
}

void uiStep2(void) {            // 여러번 움직일수 있게함 if (왼쪽 쭉하면 계속 이동), 계속 움직임

  adc_key_in = analogRead(0);    //나머지는 위의 내용과 다르지 않음
  key = get_key(adc_key_in);   
  if (key >=0){
    //Serial.println(key);
    if ( key == 0 )
      uiKeyCodeFirst = KEY_BACK;
    else if ( key == 1 )
      uiKeyCodeFirst = KEY_SELECT;
    else if ( key == 2 )
      uiKeyCodeFirst = KEY_NEXT;
    else if ( key == 4 )
      uiKeyCodeFirst = KEY_PREV;
    else 
      uiKeyCodeFirst = KEY_NONE;

    uiKeyCode = uiKeyCodeFirst;           
  }
  delay(100);
}
//키를 입력받는 부분///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////입력받은 키에따라 기능하는 부분
void updateMenu(void)          //키의 입력에 따라 menu_current를 바꿔 표시된 부분에 대비가 되도록 함-> 첫번째 메뉴에서 사용
{
  switch ( uiKeyCode ) {
  case KEY_NEXT:
    menu_current++;
    if ( menu_current >= MENU_ITEMS )menu_current = 0;
    break;
  case KEY_PREV:
    if ( menu_current == 0 )menu_current = MENU_ITEMS;
    menu_current--;
    break;
  case KEY_SELECT:
    if(menu_current!=0)
      action=1;
    break;
  }
  uiKeyCode = -1;
}
void food_menu(void)          //키의 입력에 따라 food_current를 바꿔 표시된 부분에 대비가 되도록 함, 먹이 개수및 피조절
{
  switch ( uiKeyCode ) {
  case KEY_NEXT:
    food_current++;
    if ( food_current >= MENU_TWO )food_current = 0;
    break;
  case KEY_PREV:
    if ( food_current == 0 )food_current = MENU_TWO;
    food_current--;
    break;
  case KEY_SELECT:
    if(food_current==0){    //셀렉트가 0번째 위치에서 작동됬다면
      if(Bread_num>0){      //빵 개수가 0보다 클때만 작동
      if(health<20)         //피가 20보다 적으면 10만큼 회복
        health += 10;
      else if(health>20&&health<30)  //20~30사이면 30에 맞춰줌
        health =30;
     Bread_num--;           //빵개수를 하나 감소
      }
      }
    if(food_current==1){    //위와 동일
      if(Apple_num>0){
      if(health<20)
        health += 10;
      else if(health>20&&health<30)
        health =30;
      Apple_num--;
      }
      }
    if(food_current==2){
      if(Water_num>0){
      if(health<20)
        health += 10;
      else if(health>20&&health<30)
        health =30;
      Water_num--;
      }
      }
    if(food_current==3)   //나가기를 누르면 해피빈이 있는 곳으로 돌아옴
      action=1;
    break;
  }
  uiKeyCode = -1;   //키값 초기화
}
void movement(void){             //키를 입력받았을때 물체가 움직이도록하는 함수
  switch( uiKeyCode ){  
     case KEY_PREV:     //어디를 입력하느냐에 따라 위치를 증가 혹은 감소
     if(y>0)
       y--;
       break;
     case KEY_NEXT:
     if(y<50)
       y++;
       break;
     case KEY_BACK:
     if(x>60)
       x--; 
       break;
     case KEY_NONE:
     if(x<110)
       x++;
       break;
  }
  uiKeyCode=-1;
}

void reset(void){             //마지막 화면에서 나갈때 입력받는 키
  switch( uiKeyCode ){  
     case KEY_SELECT:
     action=0;
      the_end = false;
       break;
  }
  uiKeyCode=-1;
}


void escape(void) {             //키를 입력받았을때 왼쪽 버튼을 누르면 탈출 함수(메뉴 부분에만 적용)
  switch( uiKeyCode ){
  case KEY_BACK:  //게임안에서 첫번째 메뉴로
    action=0;
    break;
  case KEY_NONE:          //게임안에서 세번째 메뉴로(먹이 주는 메뉴)
  if(menu_current==2){     //게임안에서만 작동되게 만듬
    food_current=0;   //처음 0으로 잡아줌
    action=2;
  }
    break;
  }
}

//입력받은 키에따라 기능하는 부분///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////그림을 위한 폰트조절
void u8g_prepare(void) {        //글자 폰트 조절
  u8g.setFont(u8g_font_6x10);////4x6 5x7 5x8 6x10 6x12 6x13
  u8g.setFontRefHeightExtendedText();
  u8g.setDefaultForegroundColor();
  u8g.setFontPosTop();
}

void u8g_prepare2(void) {         //글자 폰트 조절(더 작게한 버전)
  u8g.setFont(u8g_font_5x7);
  u8g.setFontRefHeightExtendedText();
  u8g.setDefaultForegroundColor();
  u8g.setFontPosTop();
}
//그림을 위한 폰트조절///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////화면을 그리는 메뉴
void drawMenu(void) {           //첫번째 메뉴, 첫번째 화면을 그리는 함수
  uint8_t i, h;
  u8g_uint_t w, d;

  u8g.setFont(u8g_font_6x12);//4x6 5x7 5x8 6x10 6x12 6x13, 폰트를 지정
  u8g.setFontRefHeightText();
  u8g.setFontPosTop();

  h = u8g.getFontAscent()-u8g.getFontDescent();
  w = u8g.getWidth();
  for( i = 0; i < MENU_ITEMS; i++ ) {
    d = (w-u8g.getStrWidth(menu_strings[i]))/2;
    u8g.setDefaultForegroundColor();
    if ( i == menu_current ) {  
      u8g.drawBox(0, i*h+1, w, h);
      u8g.setDefaultBackgroundColor();
    }
    u8g.drawStr(d, i*h+1, menu_strings[i]);
  }
}

void Tree_state(){                    //두번째 화면, 게임화면, 빈이 자라기 전 상태출력함수
  u8g_prepare2();

  if(light>400){                      //밤인지 낮인지
    u8g.drawBitmapP( 95, 0, 4, 25, bitmap_Moon);//밤
  }
  else
    u8g.drawBitmapP( 100, 0, 4, 25, bitmap_Sun);//낮

  u8g.drawStr( 0, 0, "Hum");          //습도
  u8g.setPrintPos(20,0);            //위치선정
  u8g.print(DHT.humidity);          //해당위치에 출력
  u8g.drawStr( 30, 0, "%");           

  u8g.drawStr( 0, 10, "Temp");       //온도
  u8g.setPrintPos(20,10);
  u8g.print(DHT.temperature);
  u8g.drawStr( 30, 10, "C");

  if(DHT.temperature>27){           //온도에 따른 상태
    u8g.drawStr( 0, 20, "Hot!!"); //더움
  }
  else if(DHT.temperature<25){
    u8g.drawStr( 0, 20, "Cold..");    //추움
  }
  else
    u8g.drawStr( 0, 20, "Happy..");   //행복함

  if(count_cold>80)
    count_cold=0;             //화면전환을 위한 카운트

  if(DHT.temperature<25){   //추울때 그림 2개를 번갈아가면서 출력
    if(count_cold<40)
      u8g.drawBitmapP( 40, 12, 5, 54, rook_bitmap4);
    else if(count_cold<80)
      u8g.drawBitmapP( 40, 12, 5, 54, rook_bitmap5);
    count_cold++;
  }
  else if(DHT.temperature>27) //더울때는 그림 1개만을 출력
    u8g.drawBitmapP( 40, 12, 5, 54, rook_bitmap7);
  else{                       //행복할때 그림 2개를 번갈아가면서 출력
    if(count_happy>80)
      count_happy=0;
    if( count_happy<40)
      u8g.drawBitmapP( 40, 12, 5, 54, rook_bitmap3);
    else if(count_happy<80)
      u8g.drawBitmapP( 40, 12, 5, 54, rook_bitmap6);
    count_happy++;
  }
  
  u8g.drawBox(40,2, health ,6);          //생명력 줄 표시
  if(  millis() - healthCount >1000)  //millis함수를 이용한 피조절
  {
    healthCount = millis();
    if(DHT.temperature>27 || DHT.temperature<25){ //덥거나 추우면 피가 1씩감소
      if(health>0)
        health--;
      if(health==0)                           //피가 0이되면 게임오버!!!!!!!!!!!!!!!!!!!!!!!
        bin_death=true;
    }
  }
  delay(10);
}

void drawFoodMenu(void) {           //세번째 화면, 두번째 메뉴를 그리는 함수, 음식고르는 메뉴
  uint8_t i, h;
  u8g_uint_t w, d;

  u8g.setFont(u8g_font_6x12);//4x6 5x7 5x8 6x10 6x12 6x13, 폰트조절
  u8g.setFontRefHeightText();
  u8g.setFontPosTop();

  h = u8g.getFontAscent()-u8g.getFontDescent();
  w = u8g.getWidth();
  for( i = 0; i < MENU_TWO; i++ ) {
    d = (w-u8g.getStrWidth(menu_two[i]))/2;
    u8g.setDefaultForegroundColor();
    if ( i == food_current ) {  
      u8g.drawBox(0, i*h+1, w, h);
      u8g.setDefaultBackgroundColor();
    }
    u8g.drawStr(d, i*h+1, menu_two[i]);
  }
                                       //메뉴선택 아랫부분~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  u8g.drawBox(60,50, health ,6);      //생명력 표시줄2
  u8g.setFont(u8g_font_5x7);          //4x6 5x7 5x8 6x10 6x12 6x13,, 폰트조절
  u8g.setFontRefHeightText();
  u8g.setFontPosTop();
  
  u8g.drawStr( 0, 40, "Bread");         //빵 개수
  u8g.setPrintPos(30,40);               //위치를 선정하고
  u8g.print(Bread_num);                 //해당위치에 출력
  u8g.drawStr( 60, 40, "Apple:");        //사과 개수
  u8g.setPrintPos(90,40);
  u8g.print(Apple_num);
  u8g.drawStr( 0, 50, "Water:");          //물 개수
  u8g.setPrintPos(30,50);
  u8g.print(Water_num);

}

void print_menual(void){        //첫번째 화면의 메뉴얼 출력함수
  u8g_prepare();
  u8g.drawStr( 5, 0, "how to play");
  u8g.drawStr( 5, 10, "bin react to temp");
  u8g.drawStr( 5, 20, "bin eat magnet");
  u8g.drawStr( 5, 30, "if bin is full");
  u8g.drawStr( 5, 40, "bin can be tree");
  u8g.drawStr( 5, 50, "Have Fun this");
}

void draw_food(void) {            //두번째 화면에서 특정조건 만족시 진화 과정!!!!
  u8g_prepare();                  //폰트조절하고
  switch(draw_state >> 3) {       //아래 순서로 출력!!!!!!!!!
  case 0: eat(); break;
  case 1: eat2(); break;
  case 2: eat3(); break;
  case 3: eat4(); break;
  case 4: eat5(); break;
  case 5: TreesMas(); break;
  }
}
void draw_logo(void) {            //징글벨 나오는 부분의 로고 교체가 이루어지는 부분
  u8g_prepare();
  switch(draw_state2%2) {
  case 0: logo1(); break;
  case 1: logo2(); break;
  }
}
void eat(void){
  u8g.drawStr( 5, 20, "bin eat magnet");
  delay(50);
}
void eat2(void){
  u8g.drawStr( 5, 20, "...........");
  delay(3);
}
void eat3(void){
  u8g.drawStr( 5, 20, "almost done.");
  delay(5);
}
void eat4(void){
  u8g.drawStr( 5, 20, "almost done...");
  delay(5);
}
void eat5(void){
  u8g.drawStr( 5, 20, "almost done.....");
  delay(5);
}
void TreesMas(){
  u8g.drawBitmapP( 20, 12, 5, 55, bitmap_Tree);
  delay(30); // 약 5~6초
}
void logo1(){
  u8g.drawBitmapP( 0, 0, 16, 64, bitmap_Logo1);
}
void logo2(){
  u8g.drawBitmapP( 0, 0, 16, 64, bitmap_Logo2);
}


////////////////////////////////////////////////////////////////////////setup과 loop부분
void setup() {
  pinMode(piezo,OUTPUT);          //피에저부조가 연결된 핀을 output으로 설정(출력을 담당)
  pinMode(inputMagnet, INPUT);     // 마그네틱 센서를 인풋으로 설정해놓음(디지털값) 
  u8g.setRot180();          // 보기 편하게 180도 회전
  u8g.setContrast(0);       // 보기 편하게 대비
}

void loop() {  
   chk = DHT.read(DHT11_PIN);        //온,습도센서 인식 부분
  light=analogRead(5);              //조도의 값을 받음
  val = digitalRead(inputMagnet);      //마그네틱의 값을 받음
  valSound = analogRead(1);         // 사운드센서 값을 받음, 1번핀
  if(bin_death==false){               //빈이 죽지 않은 상태라면
  if((health==30&&action==1&&val==HIGH&&(25<=DHT.temperature&&DHT.temperature<=27))||the_end){ //적정온도에서 그리고 게임 안에서 마그네틱이 들어왔다면
    the_end=true;                                                       //항상 이것을 출력하게 해줌
    u8g.firstPage();                                                     //화면을 한번 초기화해주고
    if(isEnd == false){                                                   //진화를 시작하도록함
         do {
           draw_food();                                                    //진화를 시작함
        } while( u8g.nextPage() );
        draw_state++;
        if ( draw_state >= 8*6 ){
           draw_state = 0;
           isEnd = true;                                                  //화면 전환(다음단계로 가기 위함)을 위한 bool변수
        }
    }
    else{                                        //isEnd = true니까 여기 부분 발동, 우리가 조작 가능하게 구현
      if( present == false ){
           uiStep2();                             //입력을 계속 받을 수 있는uiStep2으로 변경
           movement();                            //그에 따른 이동함수 호출
           u8g.firstPage();
             do  {
                u8g.drawBitmapP( 20, 12 , 5, 55, bitmap_Tree);    //트리가 고정되있고
                u8g.drawBitmapP( x, y, 2, 16, bitmap_child);  //아이 그림을 조작 가능하게 함
             } while( u8g.nextPage() );
      }
      
      if(  x > 50 && x < 68  && y > 40  && valSound > 30 || present ){    //아이가 해당 위치에 있고 사운드 센서의 소리가 발동됬다면 작동     
          uiStep2();                        //키를 받고
          reset();                          //나갈 수 있게 작동한 부분   
          u8g.firstPage();                
          present = true;                   //이것이 발동됬다면 계속 여기 들어오게 만듬
      do  {
          draw_logo();                      //로고를 그리고
      } while( u8g.nextPage() );
         draw_state2++;                   //다음 발동시 다른 로고를 출력하게 함
           delay(100);   
          //////////////////////////// 피에조
       if((draw_state2%2)==0){
         for(int i=0; i<numTones2; i++){     //트리송 발동 부분, tone 제네레이션을 이용
            if(tones2[i]==0){}  
            else
              tone(piezo,tones2[i]); 
            delay(80); 
            noTone(piezo);
             delay(50); 
        }
       }
       else{
         for(int i=0; i<numTones; i++){     //징글벨 발동 부분, tone 제네레이션을 이용
           if(tones[i]==0){}
           else
            tone(piezo,tones[i]); 
           delay(80); 
           noTone(piezo);
            delay(50); 
        }
       }
        delay(100);
      }
    }
  }////////////////////////////////////여기까지가 마그네틱 들어왔을때!!!!!!!!!!!!!!!!!!!
  
  if(the_end == false ){              //마그네틱이 작동 안했을때(the_end는 마그네틱이 작동해야 true로 변함)
    if(action==0 ){                  //클릭이 들어오지 않았을때는
      uiStep();                                
      updateMenu();                 //메뉴전용 키함수를 사용하고           
      u8g.firstPage();
      do  {
        drawMenu();                   //메뉴를 출력함
      } while( u8g.nextPage() );
    }
    if(action==1&&menu_current==1){   //첫번째 메뉴얼에서 클릭하면 메뉴얼을 출력
      uiStep();                               
      escape();                           //만약 뒤로가기를 누르면 빠져나오기 가능
      u8g.firstPage();  
      do {
        print_menual();                //메뉴얼을 출력
      } while( u8g.nextPage() );
    }

    if(action==1&&menu_current==2){     //두번째 메뉴얼에서 클릭하면 게임이 시작
      uiStep();                       
      escape();                       
      u8g.firstPage();
      do {
        Tree_state();                 //해피빈과의 교류
      } while( u8g.nextPage() );
    }
    if(action==1&&menu_current==3){     //세번째 메뉴얼에서 클릭하면 thank you구문 출력
      uiStep();                               
      escape();
      u8g.firstPage();  
      do {
        u8g_prepare();
        u8g.drawStr( 10, 20, "thank you to play");    //thank you구문 출력

      } while( u8g.nextPage() );
    }
    if(action==2){                    //게임 안에서 세번째 메뉴(음식을 먹는 것)에 들어 갔을때-->escape의 오른쪽 버튼은 게임 안에서만 작동되도록 구현했으므로 이게 가능!!!!
      uiStep();
      food_menu();                      //세번째 메뉴전용 키를 사용
      u8g.firstPage();
      do { 
          drawFoodMenu();               //세번째 메뉴를 출력
            } while( u8g.nextPage() );      
    }
  }
}//////////////////////////////////////////////여기까지가 마그네틱 작동 안했을때+빈이 안죽었을 때!!!!!!!!!!!
else{                               //여기는 처음부분의 빈이 죽었을 때임!!!!!!!!!!!
   u8g.firstPage();
   do {
      u8g.drawBitmapP( 0, 0, 16, 64, bitmap_gameover);  //죽을시 gameover화면 출력
    } while( u8g.nextPage() );
}
}

